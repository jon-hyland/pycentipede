from typing import List, Optional
from splitter.term import Term
from splitter.split_pass import Pass


class SplitResult:
    """Represents the results of a single split operation, including all passes."""

    def __init__(self, input_: str, output: Optional[str], score: Optional[float], term_count: int, matched_terms: List[Term],
                 pass_count: int, passes: List[Pass], elapsed_ms: int, cached: bool):
        """Class constructor."""
        self.__input: str = input_
        self.__output: str = output
        self.__score: float = score
        self.__term_count: int = term_count
        self.__matched_terms: List[Term] = matched_terms
        self.__pass_count: int = pass_count
        self.__passes: List[Pass] = passes
        self.__elapsed_ms: int = elapsed_ms
        self.__cached: bool = cached

    @property
    def input(self) -> str:
        """The original input string."""
        return self.__input

    @property
    def output(self) -> str:
        """The split output (ie. the display value of the top-ranked pass)."""
        if self.__output is None:
            if (self.__passes is not None) and (len(self.__passes) > 0):
                value = ""
                for s in self.__passes[0].splits:
                    if len(value) > 0:
                        value += " "
                    value += s.text
                self.__output = value
            else:
                self.__output = ""
        return self.__output

    @property
    def score(self) -> float:
        """The confidence score of the split output (score of the top-ranked pass)."""
        if self.__score is None:
            if (self.__passes is not None) and (len(self.__passes) > 0):
                self.__score = self.__passes[0].score()
            else:
                self.__score = 0.0
        return self.__score

    @property
    def term_count(self) -> int:
        """The total number of matching terms found in the original input by the Aho Corasick search algorithm."""
        return self.__term_count

    @property
    def matched_terms(self) -> List[Term]:
        """The matching terms found in the original input by the Aho Corasick search algorithm."""
        return self.__matched_terms

    @property
    def pass_count(self) -> int:
        """Count of the total number of passes generated by the split operation."""
        return self.__pass_count

    @property
    def passes(self) -> List[Pass]:
        """Returns the list of Pass objects."""
        return self.__passes

    @property
    def elapsed_ms(self) -> int:
        """Returns the time taken (in milliseconds) to perform the split logic."""
        return self.__elapsed_ms

    @property
    def cached(self) -> bool:
        """Returns true if the result was fetched from the cache, rather than invoking split logic."""
        return self.__cached

    def __repr__(self) -> str:
        """Print and debug display."""
        return (self.output if self.output else "") + (" ({})".format(self.score) if self.score else "")
