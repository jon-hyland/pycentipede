
class SplitResult:
    """Represents the results of a single split operation, including all passes."""
    __input = None
    __output = None
    __score = None
    __term_count = None
    __matched_terms = None
    __pass_count = None
    __passes = None
    __elapsed_ms = None
    __cached = None

    @property
    def input(self):
        """The original input string."""
        return self.__input

    @property
    def output(self):
        """The split output (ie. the display value of the top-ranked pass)."""
        if self.__output is None:
            if (self.__passes is not None) and (len(self.__passes) > 0):
                value = ""
                for s in self.__passes[0].splits:
                    if len(value) > 0:
                        value += " "
                    value += s.text
                self.__output = value
            else:
                self.__output = ""
        return self.__output

    @property
    def score(self):
        """The confidence score of the split output (score of the top-ranked pass)."""
        if self.__score is None:
            if (self.__passes is not None) and (len(self.__passes) > 0):
                self.__score = self.__passes[0].score()
            else:
                self.__score = 0.0
        return self.__score

    @property
    def term_count(self):
        """The total number of matching terms found in the original input by the Aho Corasick search algorithm."""
        return self.__term_count

    @property
    def matched_terms(self):
        """The matching terms found in the original input by the Aho Corasick search algorithm."""
        return self.__matched_terms

    @property
    def pass_count(self):
        """Count of the total number of passes generated by the split operation."""
        return self.__pass_count

    @property
    def passes(self):
        """Returns the list of Pass objects."""
        return self.__passes

    @property
    def elapsed_ms(self):
        """Returns the time taken (in milliseconds) to perform the split logic."""
        return self.__elapsed_ms

    @property
    def cached(self):
        """Returns true if the result was fetched from the cache, rather than invoking split logic."""
        return self.__cached

    def __init__(self, input_=None, output=None, score=None, term_count=None, matched_terms=None,
                 pass_count=None, passes=None, elapsed_ms=0, cached=False):
        """Class constructor."""
        self.__input = input_
        self.__output = output
        self.__score = score
        self.__term_count = term_count
        self.__matched_terms = matched_terms
        self.__pass_count = pass_count
        self.__passes = passes
        self.__elapsed_ms = elapsed_ms
        self.__cached = cached

    def __repr__(self):
        """Print and debug display."""
        return (self.output if self.output else "") + (" ({})".format(self.score) if self.score else "")
